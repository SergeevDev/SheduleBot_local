import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.executor import start_polling
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
from aiogram import executor

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
API_TOKEN = '7085107605:AAGjuo8AT88l2k9H-vsoKGsxzAdYYHYTtOQ'
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class ScheduleState(StatesGroup):
    main_menu = State()
    faculty = State()
    group = State()
    day_selection = State()

# –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('schedule.db', check_same_thread=False)
cursor = conn.cursor()

def get_week_info():
    today = datetime.now()
    week_number = today.isocalendar()[1]
    week_parity = '–ß—ë—Ç–Ω–∞—è' if week_number % 2 == 0 else '–ù–µ—á—ë—Ç–Ω–∞—è'
    day_of_week = today.weekday() + 1
    return today, week_parity, day_of_week

def get_day_name(day_number):
    days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    return days[day_number - 1] if 1 <= day_number <= 7 else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å'

@dp.message_handler(commands=['start'], state="*")
async def start(message: types.Message, state: FSMContext):
    await state.reset_state()
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–ù–∞—á–∞—Ç—å"))
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å'", reply_markup=keyboard)
    await ScheduleState.main_menu.set()

@dp.message_handler(state=ScheduleState.main_menu)
async def main_menu(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞—á–∞—Ç—å":
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        await ScheduleState.faculty.set()
    else:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")

@dp.message_handler(state=ScheduleState.faculty)
async def select_faculty(message: types.Message, state: FSMContext):
    if message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        cursor.execute("SELECT DISTINCT faculty FROM schedule")
        faculties = cursor.fetchall()
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        for faculty in faculties:
            keyboard.add(KeyboardButton(faculty[0]))
        keyboard.add(KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:", reply_markup=keyboard)
    elif message.text == "–ù–∞–∑–∞–¥":
        await start(message, state)
    else:
        selected_faculty = message.text
        cursor.execute("SELECT MAX(semester) FROM schedule WHERE faculty = ?", (selected_faculty,))
        max_semester = cursor.fetchone()[0]
        await state.update_data(faculty=selected_faculty, semester=max_semester)
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton('1'))
        keyboard.add(KeyboardButton('2'))
        keyboard.add(KeyboardButton('–í—Å–µ'))
        keyboard.add(KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:", reply_markup=keyboard)
        await ScheduleState.group.set()

@dp.message_handler(state=ScheduleState.group)
async def select_group(message: types.Message, state: FSMContext):
    selected_group = message.text
    if selected_group == "–ù–∞–∑–∞–¥":
        cursor.execute("SELECT DISTINCT faculty FROM schedule")
        faculties = cursor.fetchall()
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        for faculty in faculties:
            keyboard.add(KeyboardButton(faculty[0]))
        keyboard.add(KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:", reply_markup=keyboard)
        await ScheduleState.faculty.set()
    else:
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton('–°–µ–≥–æ–¥–Ω—è'), KeyboardButton('–ó–∞–≤—Ç—Ä–∞'), KeyboardButton('–ù–∞–∑–∞–¥'))
        await message.answer(f"–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {selected_group}\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å:", reply_markup=keyboard)
        await state.update_data(group=selected_group)
        await ScheduleState.day_selection.set()

@dp.message_handler(state=ScheduleState.day_selection)
async def show_schedule(message: types.Message, state: FSMContext):
    selected_day = message.text
    if selected_day == "–ù–∞–∑–∞–¥":
        selected_faculty = (await state.get_data())['faculty']
        cursor.execute("SELECT MAX(semester) FROM schedule WHERE faculty = ?", (selected_faculty,))
        max_semester = cursor.fetchone()[0]
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton('1'))
        keyboard.add(KeyboardButton('2'))
        keyboard.add(KeyboardButton('–í—Å–µ'))
        keyboard.add(KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:", reply_markup=keyboard)
        await ScheduleState.group.set()
    else:
        data = await state.get_data()
        selected_faculty, selected_semester, selected_group = data['faculty'], data['semester'], data['group']
        _, week_parity, day_of_week = get_week_info()
        week_parity_symbol = "üü¢" if week_parity == "–ß—ë—Ç–Ω–∞—è" else "üî¥"
        
        # –°—Ç—Ä–æ–∏–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
        group_condition = "(group_name = '1' OR group_name = '2' OR group_name = '')" if selected_group == "–í—Å–µ" else f"(group_name = '{selected_group}' OR group_name = '')"
        
        # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
        if selected_day == '–°–µ–≥–æ–¥–Ω—è':
            query = f"""
                SELECT start_time, lesson_name, teacher, room, column_number 
                FROM schedule 
                WHERE faculty = ? AND semester = ? AND {group_condition}
                AND (parity = ? OR parity = '') AND column_number = ?
            """
            params = (selected_faculty, selected_semester, week_parity, day_of_week)
        elif selected_day == '–ó–∞–≤—Ç—Ä–∞':
            next_day = (day_of_week % 7) + 1
            query = f"""
                SELECT start_time, lesson_name, teacher, room, column_number 
                FROM schedule 
                WHERE faculty = ? AND semester = ? AND {group_condition}
                AND (parity = ? OR parity = '') AND column_number = ?
            """
            params = (selected_faculty, selected_semester, week_parity, next_day)
        else:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–°–µ–≥–æ–¥–Ω—è' –∏–ª–∏ '–ó–∞–≤—Ç—Ä–∞'.")
            return

        cursor.execute(query, params)
        schedule = cursor.fetchall()

        response = f"{week_parity} {week_parity_symbol}\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ {selected_faculty}\n–°–µ–º–µ—Å—Ç—Ä: {selected_semester}\n–ì—Ä—É–ø–ø–∞: {selected_group}\n\n"
        day_name = get_day_name(day_of_week) if selected_day == '–°–µ–≥–æ–¥–Ω—è' else get_day_name(next_day)

        if schedule:
            response += f"{day_name} ({selected_day})\n" + "_" * 24 + "\n"
            for entry in schedule:
                response += f"\n–ù–∞—á–∞–ª–æ: {entry[0]}\n–ü—Ä–µ–¥–º–µ—Ç: {entry[1]}\n–ê—É–¥–∏—Ç–æ—Ä–∏—è: {entry[3]}\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {entry[2]}\n" + "_" * 24 + "\n"
        else:
            response += "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è."

        await message.answer(response, parse_mode='HTML')

if __name__ == '__main__':
    executor.start_polling(dp)
